package GUI;

import CryptographyAlgorithm.AES;
import CryptographyAlgorithm.RSA;
import SteganographyAlgorithm.LSB;

import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Encode extends javax.swing.JPanel {

    /**
     * Creates new form Home
     */
    public Encode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePathLabel = new javax.swing.JLabel();
        imagePathTextField = new javax.swing.JTextField();
        selectImageButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        steganoLabel = new javax.swing.JLabel();
        steganoComboBox = new javax.swing.JComboBox<>();
        cryptoComboBox = new javax.swing.JComboBox<>();
        cryptoLabel = new javax.swing.JLabel();
        secretKeyLabel = new javax.swing.JLabel();
        secretKeyPasswordField = new javax.swing.JPasswordField();
        encodeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        imagePathError = new javax.swing.JLabel();
        messageError = new javax.swing.JLabel();
        secretKeyError = new javax.swing.JLabel();
        steganoError = new javax.swing.JLabel();
        cryptoError = new javax.swing.JLabel();

        imagePathLabel.setText("Select Image");

        imagePathTextField.setEditable(false);

        selectImageButton.setText("Select");
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        messageLabel.setText("Enter Message");

        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        jScrollPane1.setViewportView(messageTextArea);

        steganoLabel.setText("Choose Encode method");

        steganoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LSB" }));

        cryptoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "RSA" }));

        cryptoLabel.setText("Choose Encrypt method");

        secretKeyLabel.setText("Enter Secret Key / Public Key");

        encodeButton.setText("Encode");
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");

        imagePathError.setForeground(new java.awt.Color(255, 0, 0));

        messageError.setForeground(new java.awt.Color(255, 0, 0));

        secretKeyError.setForeground(new java.awt.Color(255, 0, 0));

        steganoError.setForeground(new java.awt.Color(255, 0, 0));

        cryptoError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagePathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectImageButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(steganoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(imagePathLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(imagePathError))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(messageLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(messageError))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(steganoLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(steganoError)))
                                .addGap(0, 230, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cryptoLabel)
                                .addGap(18, 18, 18)
                                .addComponent(cryptoError))
                            .addComponent(cryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(secretKeyLabel)
                        .addGap(18, 18, 18)
                        .addComponent(secretKeyError)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(secretKeyPasswordField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encodeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imagePathLabel)
                    .addComponent(imagePathError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imagePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageLabel)
                    .addComponent(messageError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secretKeyLabel)
                    .addComponent(secretKeyError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secretKeyPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(steganoLabel)
                    .addComponent(cryptoLabel)
                    .addComponent(steganoError)
                    .addComponent(cryptoError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(steganoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encodeButton)
                    .addComponent(backButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new ImageFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        int i = fileChooser.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            imageFile = fileChooser.getSelectedFile();
            imageFilePath = imageFile.getPath();
            if (!imageFilePath.isEmpty()) {
                imagePathTextField.setText(imageFilePath);
            }
        }
    }//GEN-LAST:event_selectImageButtonActionPerformed

    //GEN-FIRST:event_encodeButtonActionPerformed
    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {

        //Get Values
        String imagePath = imagePathTextField.getText();
        String message = messageTextArea.getText();
        String secretKey = new String(secretKeyPasswordField.getPassword());
        String steganoMethod = String.valueOf(steganoComboBox.getSelectedItem());
        String cryptoMethod = String.valueOf(cryptoComboBox.getSelectedItem());

        //Validation
        boolean validate = true;
        if (imagePath == null || imagePath.isEmpty()) {
            imagePathError.setText("Image File is required");
            validate = false;
        } else {
            imagePathError.setText("");
        }

        if (message == null || message.isEmpty()) {
            messageError.setText("Message is required");
            validate = false;
        } else {
            messageError.setText("");
        }

        if (secretKey.isEmpty()) {
            secretKeyError.setText("Key is required");
            validate = false;
        } else {
            secretKeyError.setText("");
        }

        if (steganoMethod == null || steganoMethod.isEmpty()) {
            steganoError.setText("Select Encoding method");
            validate = false;
        } else {
            steganoError.setText("");
        }

        if (cryptoMethod == null || cryptoMethod.isEmpty()) {
            cryptoError.setText("Select Encrypting method");
            validate = false;
        } else {
            cryptoError.setText("");
        }

        if (!validate) {
            return;
        }

        //Pre-processing
        int slashIndex = imageFilePath.lastIndexOf("\\");
        int pointIndex = imageFilePath.lastIndexOf(".");
        String filePath = imageFilePath.substring(0, slashIndex);
        String fileName = imageFilePath.substring(slashIndex + 1, pointIndex);
        String fileExt = imageFilePath.substring(pointIndex + 1);
        fileExt = fileExt.toLowerCase();

        //Message Encryption
        String encryptedMessage = message;
        try {
            encryptedMessage = switch (cryptoMethod) {
                case "AES" -> AES.encrypt(message, secretKey);
                case "RSA" ->
                    // encryptedMessage = RSAUtil.encrypt(message, secretKey);
                        RSA.encrypt(message, secretKey);
                default -> message;
            };
        } catch (Exception e) {
            System.out.println("Something went wrong in Encryption");
            JOptionPane.showMessageDialog(this, "Something went wrong in Encryption", "Alert", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }

        //Image Encoding
        if (steganoMethod.equals("LSB")) {
            if (LSB.encode(filePath, fileName, fileExt, fileName + "_encoded", encryptedMessage)) {
                System.out.println("Image has been encoded successfully");
                JOptionPane.showMessageDialog(this, "Image has been encoded successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.println("Image couldn't be encoded");
                JOptionPane.showMessageDialog(this, "Image couldn't be encoded", "Alert", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_encodeButtonActionPerformed

    public void setActionListenerBackButton(ActionListener actionListener) {
        backButton.addActionListener(actionListener);
    }

    private File imageFile;
    private String imageFilePath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> cryptoComboBox;
    private javax.swing.JLabel cryptoError;
    private javax.swing.JLabel cryptoLabel;
    private javax.swing.JButton encodeButton;
    private javax.swing.JLabel imagePathError;
    private javax.swing.JLabel imagePathLabel;
    private javax.swing.JTextField imagePathTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageError;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JLabel secretKeyError;
    private javax.swing.JLabel secretKeyLabel;
    private javax.swing.JPasswordField secretKeyPasswordField;
    private javax.swing.JButton selectImageButton;
    private javax.swing.JComboBox<String> steganoComboBox;
    private javax.swing.JLabel steganoError;
    private javax.swing.JLabel steganoLabel;
    // End of variables declaration//GEN-END:variables
}
