package GUI;

import CryptographyAlgorithm.RSA;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;

import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class KeyGenerator extends javax.swing.JPanel {

    /**
     * Creates new form Home
     */
    public KeyGenerator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        destinationPathLabel = new javax.swing.JLabel();
        destinationPathTextField = new javax.swing.JTextField();
        selectImageButton = new javax.swing.JButton();
        publicKeyLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        privateKeyTextArea = new javax.swing.JTextArea();
        cryptoComboBox = new javax.swing.JComboBox<>();
        privateKeyLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        destinationPathError = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        publicKeyTextArea = new javax.swing.JTextArea();
        copyPrivateKeyButton = new javax.swing.JButton();
        copyPublicKeyButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 426));

        destinationPathLabel.setText("Select Destination");

        destinationPathTextField.setEditable(false);

        selectImageButton.setText("Select");
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        publicKeyLabel.setText("Public Key");

        privateKeyTextArea.setColumns(20);
        privateKeyTextArea.setRows(5);
        jScrollPane1.setViewportView(privateKeyTextArea);

        cryptoComboBox.setEditable(false);
        cryptoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "RSA" }));
        cryptoComboBox.setVisible(false);

        privateKeyLabel.setText("Private Key");

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");

        destinationPathError.setForeground(new java.awt.Color(255, 0, 0));

        saveButton.setText("Save to destination (.txt)");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        publicKeyTextArea.setColumns(20);
        publicKeyTextArea.setRows(5);
        jScrollPane2.setViewportView(publicKeyTextArea);

        copyPrivateKeyButton.setText("Copy");
        copyPrivateKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPrivateKeyButtonActionPerformed(evt);
            }
        });

        copyPublicKeyButton.setText("Copy");
        copyPublicKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPublicKeyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1)
                                .addGroup(layout.createSequentialGroup().addComponent(destinationPathTextField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectImageButton))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                        layout.createSequentialGroup()
                                                .addComponent(cryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        387, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        170, Short.MAX_VALUE)
                                                .addComponent(backButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(saveButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(generateButton))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(
                                        javax.swing.GroupLayout.Alignment.TRAILING,
                                        layout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(copyPrivateKeyButton))
                                .addGroup(layout.createSequentialGroup().addGroup(layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup().addComponent(destinationPathLabel)
                                                .addGap(18, 18, 18).addComponent(destinationPathError))
                                        .addComponent(publicKeyLabel)).addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup().addComponent(privateKeyLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(copyPublicKeyButton)))
                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                .createSequentialGroup().addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(destinationPathLabel).addComponent(destinationPathError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(destinationPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(publicKeyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18).addComponent(privateKeyLabel))
                        .addComponent(copyPublicKeyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(copyPrivateKeyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(generateButton).addComponent(backButton).addComponent(saveButton)
                        .addComponent(cryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectImageButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // fileChooser.addChoosableFileFilter(new ImageFilter());
        // fileChooser.setAcceptAllFileFilterUsed(false);
        int i = fileChooser.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            destinationFile = fileChooser.getSelectedFile();
            destinationFilePath = destinationFile.getPath();
            if (!destinationFilePath.isEmpty()) {
                destinationPathTextField.setText(destinationFilePath);
            }
        }
    }// GEN-LAST:event_selectImageButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generateButtonActionPerformed

        try {
            RSA rsa = new RSA();
            publicKeyTextArea.setText(rsa.getPublicKeyString());
            privateKeyTextArea.setText(rsa.getPrivateKeyString());
            System.out.println("Keys have been generated Successfully");
            JOptionPane.showMessageDialog(this, "Keys have been generated Successfully", "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Keys could not be generated");
            JOptionPane.showMessageDialog(this, "Keys could not be generated", "Alert", JOptionPane.WARNING_MESSAGE);
        }

    }// GEN-LAST:event_generateButtonActionPerformed

    private void copyPublicKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_copyPublicKeyButtonActionPerformed
        String publicKeyString = publicKeyTextArea.getText();
        if (!publicKeyString.isEmpty()) {
            StringSelection stringSelection = new StringSelection(publicKeyString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
            System.out.println("Public Key is copied");
            JOptionPane.showMessageDialog(this, "Public Key is copied", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }// GEN-LAST:event_copyPublicKeyButtonActionPerformed

    private void copyPrivateKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_copyPrivateKeyButtonActionPerformed
        String privateKeyString = privateKeyTextArea.getText();
        if (!privateKeyString.isEmpty()) {
            StringSelection stringSelection = new StringSelection(privateKeyString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
            System.out.println("Private Key is copied");
            JOptionPane.showMessageDialog(this, "Private Key is copied", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }// GEN-LAST:event_copyPrivateKeyButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        String destination = destinationPathTextField.getText();
        String publicKeyString = publicKeyTextArea.getText();
        String privateKeyString = privateKeyTextArea.getText();
        boolean validate = true;
        if (destination == null || destination.isEmpty()) {
            destinationPathError.setText("Folder is required");
            validate = false;
        } else {
            destinationPathError.setText("");
        }
        if (publicKeyString == null || privateKeyString == null || publicKeyString.isEmpty()
                || privateKeyString.isEmpty()) {
            System.out.println("Key Fields are empty");
            JOptionPane.showMessageDialog(this, "Key Fields are empty", "Alert", JOptionPane.WARNING_MESSAGE);
            validate = false;
        }
        if (!validate) {
            return;
        }

        File publicKeyFile = new File(destination + "/PublicKey.txt");
        File privateKeyFile = new File(destination + "/PrivateKey.txt");
        int index = 1;
        while (publicKeyFile.exists() || privateKeyFile.exists()) {
            publicKeyFile = new File(destination + "/PublicKey (" + index + ").txt");
            privateKeyFile = new File(destination + "/PrivateKey (" + index + ").txt");
            index++;
            if (index > 100) {
                System.exit(0);
            }
        }

        try {
            FileWriter fileWriter1 = new FileWriter(publicKeyFile);
            FileWriter fileWriter2 = new FileWriter(privateKeyFile);
            fileWriter1.write(publicKeyString);
            fileWriter2.write(privateKeyString);
            fileWriter1.close();
            fileWriter2.close();
            System.out.println("Keys are saved to destination");
            JOptionPane.showMessageDialog(this, "Keys are saved to destination", "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Key Fields couldn't be saved");
            JOptionPane.showMessageDialog(this, "Key Fields couldn't be saved", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }// GEN-LAST:event_saveButtonActionPerformed

    public void setActionListenerBackButton(ActionListener actionListener) {
        backButton.addActionListener(actionListener);
    }

    private File destinationFile;
    private String destinationFilePath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton copyPrivateKeyButton;
    private javax.swing.JButton copyPublicKeyButton;
    private javax.swing.JComboBox<String> cryptoComboBox;
    private javax.swing.JLabel destinationPathError;
    private javax.swing.JLabel destinationPathLabel;
    private javax.swing.JTextField destinationPathTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JTextArea privateKeyTextArea;
    private javax.swing.JLabel publicKeyLabel;
    private javax.swing.JTextArea publicKeyTextArea;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectImageButton;
    // End of variables declaration//GEN-END:variables
}
